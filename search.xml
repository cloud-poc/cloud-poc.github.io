<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Harshicorp vault setup &amp; Config</title>
      <link href="/2019/07/14/Harshicorp-vault-setup-Config/index/"/>
      <url>/2019/07/14/Harshicorp-vault-setup-Config/index/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Instal-vault"><a href="#1-Instal-vault" class="headerlink" title="1. Instal vault"></a>1. Instal vault</h2><ul><li>Prepare <em>docker-compose.yml</em>,  content as below (just a sample, please don’t use it for prod, there are more aspects should be considered)<a id="more"></a></li></ul><pre><code>version: &apos;3&apos;services:    consul:        container_name: consul.server        command: agent -server -bind 0.0.0.0 -client 0.0.0.0 -bootstrap-expect=1        image: consul:latest        restart: always        volumes:          - ./consul.server/config:/consul/config          - ./consul.server/data:/consul/data        ports:          - &quot;9300:9300&quot;          - &quot;9500:9500&quot;          - &quot;9600:9600/udp&quot;    vault:        container_name: vault.server        image: vault        ports:        - &quot;8200:8200&quot;        restart: always        links:            - consul:consul.server        volumes:        - ./vault.server/config:/mnt/vault/config        - ./vault.server/data:/mnt/vault/data        - ./vault.server/logs:/mnt/vault/logs        - ./vault.server/config:/vault/config        - /etc/letsencrypt:/etc/letsencrypt        cap_add:        - IPC_LOCK        command: server</code></pre><ul><li><em>consul config - config.json</em></li></ul><blockquote><p>{<br>  “datacenter”: “data-center-1”,<br>  “node_name”: “master-node”,<br>  “log_level”: “INFO”,<br>  “server”: true,<br>  “data_dir”: “/consul/data”,<br>  “ui” : true,<br>  “ports”: {<br>    “http”: 8500,<br>    “server”: 8300<br>  }<br>} </p></blockquote><ul><li><em>vault config - vault.hcl</em></li></ul><blockquote><p>ui = true<br>backend “consul” {<br>        address = “consul:8500”<br>        advertise_addr = “<a href="http://consul:8300&quot;" target="_blank" rel="noopener">http://consul:8300&quot;</a><br>        scheme = “http”<br>}<br>listener “tcp” {<br>    address = “0.0.0.0:8200<br>    tls_disable = 1<br>}<br>disable_mlock = true</p></blockquote><ul><li>Use docker-compose up -d to run these services, and check its status<br><img src="//cloud-poc.github.io/2019/07/14/Harshicorp-vault-setup-Config/index/15532408-351f3fa54f1ebc1a.png" alt><br><img src="//cloud-poc.github.io/2019/07/14/Harshicorp-vault-setup-Config/index/15532408-698c9ee3afd1d4f9.png" alt></li></ul><h2 id="2-Configure-the-vault"><a href="#2-Configure-the-vault" class="headerlink" title="2.Configure the vault"></a>2.Configure the vault</h2><p>in #1, we created the vault container, but vault is still in uninitialized status (unsealed)</p><ul><li>Vault init</li></ul><pre><code>curl -X PUT \  https://demo.xxx.com/vault/v1/sys/init \  -H &apos;Cache-Control: no-cache&apos; \  -H &apos;Content-Type: application/json&apos; \  -H &apos;Postman-Token: cb5d640a-152e-844f-cda3-5e8be4e3eec3&apos; \  -d &apos;{&quot;secret_shares&quot;:5, &quot;secret_threshold&quot;:2}&apos;  {    &quot;keys&quot;: [        &quot;977595193b3a8cb4ae70338859f0a7264b2757775a51cca461731b1bff4b61798f&quot;,        &quot;9f6c61623da515b36671ca2677f5be084f670751e2da6a05d88970ebe832d6430b&quot;,        &quot;d1f13304840d0445e23ebe7ea39d23dc6821ddcb9fc97ce5ea2c8a9e82ca132ca0&quot;,        &quot;d49bda98c1723e659f5bb87af7774988e709ff9ad4337dc4c4851cf8a89c7dfd7f&quot;,        &quot;dfa480970d31b18b7c7943211cdd76636f51b17a55ee2d7a6718052a50d7198847&quot;    ],    &quot;keys_base64&quot;: [        &quot;l3WVGTs6jLSucDOIWfCnJksnV3daUcykYXMbG/9LYXmP&quot;,        &quot;n2xhYj2lFbNmccomd/W+CE9nB1Hi2moF2Ilw6+gy1kML&quot;,        &quot;0fEzBIQNBEXiPr5+o50j3Ggh3cufyXzl6iyKnoLKEyyg&quot;,        &quot;1JvamMFyPmWfW7h693dJiOcJ/5rUM33ExIUc+Kicff1/&quot;,        &quot;36SAlw0xsYt8eUMhHN12Y29RsXpV7i16ZxgFKlDXGYhH&quot;    ],    &quot;root_token&quot;: &quot;s.nBXC2nmVs7IVLHk6zsU7ZoaT&quot;   }</code></pre><ul><li>Vault unseal</li></ul><pre><code>curl -X PUT \  https://demo.xxx.com/vault/v1/sys/unseal \  -H &apos;Cache-Control: no-cache&apos; \  -H &apos;Content-Type: application/json&apos; \  -H &apos;Postman-Token: a43db86c-26d4-de01-9a13-eefc23857eb7&apos; \  -d &apos;{&quot;key&quot;: &quot;n2xhYj2lFbNmccomd/W+CE9nB1Hi2moF2Ilw6+gy1kML&quot;}&apos;  {    &quot;type&quot;: &quot;shamir&quot;,    &quot;initialized&quot;: true,    &quot;sealed&quot;: false,    &quot;t&quot;: 2,    &quot;n&quot;: 5,    &quot;progress&quot;: 0,    &quot;nonce&quot;: &quot;&quot;,    &quot;version&quot;: &quot;1.1.0&quot;,    &quot;migration&quot;: false,    &quot;cluster_name&quot;: &quot;vault-cluster-8492c510&quot;,    &quot;cluster_id&quot;: &quot;c73cee19-c9ab-81f1-9563-8fd060084370&quot;,    &quot;recovery_seal&quot;: false  }</code></pre><ul><li>create read/write token<br>a. create admin policy</li></ul><pre><code>curl -X POST \  https://demo.xxx.com/vault/v1/sys/policy/admin-policy \  -H &apos;Cache-Control: no-cache&apos; \  -H &apos;Content-Type: application/json&apos; \  -H &apos;Postman-Token: c03aae97-d6c1-fa79-f8d5-f4476fe8347a&apos; \  -H &apos;X-Vault-Token: s.nBXC2nmVs7IVLHk6zsU7ZoaT&apos; \  -d &apos;{&quot;policy&quot;:&quot;{\&quot;path\&quot;:{\&quot;secret/*\&quot;:{\&quot;capabilities\&quot;:[\&quot;create\&quot;, \&quot;read\&quot;, \&quot;update\&quot;, \&quot;delete\&quot;, \&quot;list\&quot;]}}}&quot;}&apos;</code></pre><p>b.create user policy<br>similar request as step $\color{red}{create admin-policy}$<br>c.check the policy we created</p><pre><code>curl -X GET \  https://demo.xxx.com/vault/v1/sys/policy/admin-policy \  -H &apos;Accept: application/json&apos; \  -H &apos;Cache-Control: no-cache&apos; \  -H &apos;Postman-Token: 6874a6ca-070c-8d20-f4bb-183e1ff663d1&apos; \  -H &apos;X-Vault-Token: s.nBXC2nmVs7IVLHk6zsU7ZoaT&apos;{    &quot;name&quot;: &quot;admin-policy&quot;,    &quot;rules&quot;: &quot;{\&quot;path\&quot;:{\&quot;secrets/*\&quot;:{\&quot;capabilities\&quot;:[\&quot;create\&quot;, \&quot;read\&quot;, \&quot;update\&quot;, \&quot;delete\&quot;, \&quot;list\&quot;]}}}&quot;,    &quot;request_id&quot;: &quot;51ba3350-f14d-0e3f-27b4-610b6442d296&quot;,    &quot;lease_id&quot;: &quot;&quot;,    &quot;renewable&quot;: false,    &quot;lease_duration&quot;: 0,    &quot;data&quot;: {        &quot;name&quot;: &quot;admin-policy&quot;,        &quot;rules&quot;: &quot;{\&quot;path\&quot;:{\&quot;secret/*\&quot;:{\&quot;capabilities\&quot;:[\&quot;create\&quot;, \&quot;read\&quot;, \&quot;update\&quot;, \&quot;delete\&quot;, \&quot;list\&quot;]}}}&quot;    },    &quot;wrap_info&quot;: null,    &quot;warnings&quot;: null,    &quot;auth&quot;: null}  </code></pre><ul><li>Create Token for above two newly created policies</li></ul><pre><code>curl -X POST \  https://demo.xxx.com/vault/v1/auth/token/create \  -H &apos;Cache-Control: no-cache&apos; \  -H &apos;Content-Type: application/json&apos; \  -H &apos;Postman-Token: 21ef1963-b06d-b4ea-547c-03539a681ca5&apos; \  -H &apos;X-Vault-Token: s.nBXC2nmVs7IVLHk6zsU7ZoaT&apos; \  -d &apos;{&quot;policies&quot;: [&quot;admin-policy&quot;]}&apos;{    &quot;request_id&quot;: &quot;a5251b70-e14c-5c56-a81e-6ad59445a44f&quot;,    &quot;lease_id&quot;: &quot;&quot;,    &quot;renewable&quot;: false,    &quot;lease_duration&quot;: 0,    &quot;data&quot;: null,    &quot;wrap_info&quot;: null,    &quot;warnings&quot;: null,    &quot;auth&quot;: {        &quot;client_token&quot;: &quot;s.AXTHvuudLS6C4PYjSvLLabr9&quot;,        &quot;accessor&quot;: &quot;wVg70OelyhDMwa4MojtCKeZ1&quot;,        &quot;policies&quot;: [            &quot;admin-policy&quot;,            &quot;default&quot;        ],        &quot;token_policies&quot;: [            &quot;admin-policy&quot;,            &quot;default&quot;        ],        &quot;metadata&quot;: null,        &quot;lease_duration&quot;: 2764800,        &quot;renewable&quot;: true,        &quot;entity_id&quot;: &quot;&quot;,        &quot;token_type&quot;: &quot;service&quot;,        &quot;orphan&quot;: false    }}{    &quot;request_id&quot;: &quot;35212529-0b4c-3c50-0489-94df50a5f781&quot;,    &quot;lease_id&quot;: &quot;&quot;,    &quot;renewable&quot;: false,    &quot;lease_duration&quot;: 0,    &quot;data&quot;: null,    &quot;wrap_info&quot;: null,    &quot;warnings&quot;: null,    &quot;auth&quot;: {        &quot;client_token&quot;: &quot;s.7A1UuLB7aJdiGhn5Qaj2FlxN&quot;,        &quot;accessor&quot;: &quot;8H2pMpG4SnKHMgH8nr56FsUJ&quot;,        &quot;policies&quot;: [            &quot;default&quot;,            &quot;user-policy&quot;        ],        &quot;token_policies&quot;: [            &quot;default&quot;,            &quot;user-policy&quot;        ],        &quot;metadata&quot;: null,        &quot;lease_duration&quot;: 2764800,        &quot;renewable&quot;: true,        &quot;entity_id&quot;: &quot;&quot;,        &quot;token_type&quot;: &quot;service&quot;,        &quot;orphan&quot;: false    }}</code></pre><ul><li>Try to use above token to read/write data<br>$\color{red}{Admin-token}$ to put key/value, otherwise got $\color{red}{error occurred:permission denied}$</li></ul><pre><code>curl -X POST \  https://demo.xxx.com/vault/v1/secret/test \  -H &apos;Cache-Control: no-cache&apos; \  -H &apos;Content-Type: application/json&apos; \  -H &apos;Postman-Token: 0b3cd187-14fd-c94f-9198-794e71b906af&apos; \  -H &apos;X-Vault-Token: s.AXTHvuudLS6C4PYjSvLLabr9&apos; \   -d &apos;{    &quot;token&quot;:&quot;test-token&quot;}&apos;</code></pre><p>$\color{red}{user-token}$ to get key/value</p><pre><code>curl -X GET \  https://demo.xxx.com/vault/v1/secret/test \  -H &apos;Cache-Control: no-cache&apos; \  -H &apos;Content-Type: application/json&apos; \  -H &apos;Postman-Token: 2f1e1e02-db11-5fdc-426e-ad0adc735b47&apos; \  -H &apos;X-Vault-Token: s.7A1UuLB7aJdiGhn5Qaj2FlxN&apos; {    &quot;request_id&quot;: &quot;8a1dfacd-7514-ae7d-8133-d3295fafb394&quot;,    &quot;lease_id&quot;: &quot;&quot;,    &quot;renewable&quot;: false,    &quot;lease_duration&quot;: 2764800,    &quot;data&quot;: {        &quot;token&quot;: &quot;test-token&quot;    },    &quot;wrap_info&quot;: null,    &quot;warnings&quot;: null,    &quot;auth&quot;: null}</code></pre><p>  #####Q1: no handler for route ‘secret/test’<br>check secrets engine if corresponding is enabled or not, commands:<br>a. docker exec -it <container-name> /bin/sh<br>b.set VAULT_ADDR=<a href="http://127.0.0.1:8200" target="_blank" rel="noopener">http://127.0.0.1:8200</a>, and VAULT_TOKEN={root token}<br>c. vault secrets list, to list out all secrets, by default,  kv secrets engine at: secret/ should be enabled, if not found, please move forward to #d<br>d. vault secrets enable -path=secret kv<br>e. test the secrets engine, vault kv put secret/hello foo=world excited=yes<br>f. vault kv get secret/hello, to check the data u’ve just pushed</container-name></p><h2 id="3-Springboot-application-intergrates-with-Vault"><a href="#3-Springboot-application-intergrates-with-Vault" class="headerlink" title="3. Springboot application intergrates with Vault"></a>3. Springboot application intergrates with Vault</h2><ul><li>create project - <em>vault-test</em>, and import related maven dependencies</li></ul><pre><code>&lt;properties&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;    &lt;spring.cloud.version&gt;Greenwich.RELEASE&lt;/spring.cloud.version&gt;&lt;/properties&gt;&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;&lt;/parent&gt;&lt;dependencyManagement&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;            &lt;version&gt;${spring.cloud.version}&lt;/version&gt;            &lt;type&gt;pom&lt;/type&gt;            &lt;scope&gt;import&lt;/scope&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-starter-vault-config&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;        &lt;artifactId&gt;spring-cloud-vault-config-databases&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;        &lt;scope&gt;test&lt;/scope&gt;        &lt;exclusions&gt;            &lt;exclusion&gt;                &lt;groupId&gt;junit&lt;/groupId&gt;                &lt;artifactId&gt;junit&lt;/artifactId&gt;            &lt;/exclusion&gt;        &lt;/exclusions&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;        &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;        &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;        &lt;optional&gt;true&lt;/optional&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;        &lt;optional&gt;true&lt;/optional&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><ul><li>Prepare test data</li></ul><pre><code>curl -X POST \  https://demo.xxx.com/v1/secret/vault-test \  -H &apos;Cache-Control: no-cache&apos; \  -H &apos;Content-Type: application/json&apos; \  -H &apos;Postman-Token: 6cad13c9-14d3-8260-dd74-6cef2b2ee822&apos; \  -H &apos;X-Vault-Token: s.AXTHvuudLS6C4PYjSvLLabr9&apos; \  -d &apos;{    &quot;username&quot;:&quot;Jamie&quot;,    &quot;password&quot;:&quot;Hlhjjj&amp;jkjlkjklhHHJKKYUJKjTFttrdfhHg#h$$HHHH&quot;}&apos;</code></pre><ul><li>Configure Spring Vault in src/main/resources/bootstrap.yml</li></ul><pre><code>server:  port: 8084logging.level.org.springframework.vault: DEBUGspring:  application:    name: vault-test#  profiles:#    active:#    - devspring.cloud:    vault:      host: demo.xxx.com      port: 443      scheme: https      authentication: TOKEN      config:          order: -10      kv:        application-name: vault-test        default-context: vault-test        backend: secret        enabled: true        profile-separator: /      token: s.7A1UuLB7aJdiGhn5Qaj2FlxN  </code></pre><ul><li>Impl a controller to inject the data loaded from vault</li></ul><pre><code>@RestControllerpublic class TestController {    @Value(&quot;${username:test}&quot;)    private String userName;    @Value(&quot;${password:test}&quot;)    private String password;    @GetMapping(&quot;/&quot;)    @ResponseBody    public Map&lt;String, String&gt; test() {        Map&lt;String, String&gt; rsp = new HashMap&lt;String, String&gt;();        rsp.put(&quot;userName&quot;, userName);        rsp.put(&quot;password&quot;, password);            return rsp;    }    }</code></pre><blockquote><p>Findings found during testing:<br><em>if change the spring.cloud.vault.config.order to a lower value, for example -100, the configs loaded from vault can take effects on spring auto-configured beans, like HikaiCP datasource, can put credentials onto vault in k/v format rather than keep these sensitive data in explicit config file, spring.datasource.username=xxx,spring.datasource.password=xxx</em></p></blockquote><ul><li>Test it</li></ul><pre><code>curl -X GET \  http://localhost:8084/ \  -H &apos;Cache-Control: no-cache&apos; \  -H &apos;Postman-Token: 9466ffbc-e8d5-355f-cb2c-c29907a5af9d&apos;{    &quot;password&quot;: &quot;Hlhjjj&amp;jkjlkjklhHHJKKYUJKjTFttrdfhHg#h$$HHHH&quot;,    &quot;userName&quot;: &quot;Jamie&quot;}</code></pre><p>you can find sources code on [git hub] (<a href="https://github.com/cloud-poc/springboot-vault-test" target="_blank" rel="noopener">https://github.com/cloud-poc/springboot-vault-test</a>)</p><p>Referenced posts:<br><a href="https://www.vaultproject.io/docs/concepts/policies.html" target="_blank" rel="noopener">https://www.vaultproject.io/docs/concepts/policies.html</a><br><a href="https://www.hashicorp.com/resources/getting-vault-enterprise-installed-running" target="_blank" rel="noopener">https://www.hashicorp.com/resources/getting-vault-enterprise-installed-running</a><br><a href="https://learn.hashicorp.com/vault/secrets-management/sm-pki-engine" target="_blank" rel="noopener">https://learn.hashicorp.com/vault/secrets-management/sm-pki-engine</a><br><a href="https://www.jianshu.com/p/267f2d9ae87e" target="_blank" rel="noopener">https://www.jianshu.com/p/267f2d9ae87e</a><br><a href="https://blog.51cto.com/7308310/2338146?source=dra" target="_blank" rel="noopener">https://blog.51cto.com/7308310/2338146?source=dra</a></p>]]></content>
      
      
      <categories>
          
          <category> Microservices </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Harshicorp </tag>
            
            <tag> Docker </tag>
            
            <tag> Microservices </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
